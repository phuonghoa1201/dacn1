# -*- coding: utf-8 -*-


# pip install nltk spacy transformers flask torch

# pip install pymongo

import nltk
# nltk.download('punkt')
from flask import Flask, request, jsonify
from nltk.chat.util import Chat, reflections
from pymongo import MongoClient

import threading
import re

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)

# K·∫øt n·ªëi v·ªõi MongoDB
client = MongoClient('mongodb+srv://anhngocthiduong:dacn123@cluster0.atjpxe0.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')  # Thay ƒë·ªïi URI n·∫øu c·∫ßn
db = client['test']  # T√™n database
collection = db['products']  # T√™n collection




# H√†m truy v·∫•n s·∫£n ph·∫©m
def query_products(keyword):
    query = {
        '$or': [
            {'category': {'$regex': keyword, '$options': 'i'}},
            {'description': {'$regex': keyword, '$options': 'i'}}
        ]
    }
    products = collection.find(query)
    return list(products)

# Ch·∫°y h√†m ki·ªÉm tra
if __name__ == "__main__":
    products = query_products('Mobiles')  # Thay '67fcef0c5c6d12218f03000f' b·∫±ng '√°o'
    print("K·∫øt qu·∫£ t√¨m ki·∫øm:")
    for product in products:
        print(product)

# Danh s√°ch t·ª´ kh√≥a c·ª©ng (thay cho keywords_collection)
keywords = [
    'mobiles', 'laptops', 'tablets', 'headphones', 'watches', 'mouse',
    'iphone', 'samsung', 'macbook', 'ipad', 'airpods', 'sony'
]

# H√†m l·∫•y danh m·ª•c t·ª´ products_collection (d√πng cho g·ª£i √Ω)
def get_categories():
    categories = collection.distinct('category')
    return categories if categories else ['mobiles', 'laptops', 'tablets', 'headphones', 'watches', 'mouse']

# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o ƒë·ªÉ l·∫•y t·ª´ kh√≥a
def extract_keyword(user_input):
    stop_words = ['t√¥i', 'mu·ªën', 'mua', 'c√°i', 'm·ªôt', 'cho', 'v·ªõi', 'gi√°', 'kho·∫£ng']
    # H·ªó tr·ª£ ƒë∆°n v·ªã gi√° (tri·ªáu/trieu)
    match = re.search(r'(\d+)\s*(tri·ªáu|trieu)', user_input, re.IGNORECASE)
    if match:
        return str(int(match.group(1)) * 1000000)

    words = user_input.lower().split()
    for word in words:
        if word not in stop_words:
            return word
    cleaned_input = ' '.join(word for word in words if word not in stop_words)
    return cleaned_input if cleaned_input else user_input

# H√†m truy v·∫•n s·∫£n ph·∫©m theo t·ª´ kh√≥a
def query_products(keyword):
    query = {'$or': [
        {'name': {'$regex': keyword, '$options': 'i'}},  # T√¨m trong name
        {'category': {'$regex': keyword, '$options': 'i'}},  # T√¨m trong category
        {'description': {'$regex': keyword, '$options': 'i'}},  # T√¨m trong description
    ], 'quantity': {'$gt': 0}}  # Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≤n h√†ng

    # N·∫øu t·ª´ kh√≥a l√† s·ªë, t√¨m trong kho·∫£ng gi√° (¬±10%)
    try:
        price_value = float(keyword)
        query['$or'].append({'price': {'$gte': price_value * 0.9, '$lte': price_value * 1.1}})
    except ValueError:
        pass

    products = collection.find(query)
    return list(products)

# H√†m x·ª≠ l√Ω ƒë·∫ßu v√†o v√† tr·∫£ v·ªÅ g·ª£i √Ω
def get_recommendations(user_input):
    keyword = extract_keyword(user_input)

    products = query_products(keyword)

    if not products:
        categories = get_categories()
        # return f"Hmm, kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi '{keyword}' c·∫£. üòÖ B·∫°n mu·ªën th·ª≠ t√¨m {', '.join(categories).lower()} kh√¥ng?"
        return f"Hmm, b·∫°n c√≥ mu·ªën th·ª≠ t√¨m {', '.join(categories).lower()} kh√¥ng?"

    response = f"Tuy·ªát! D∆∞·ªõi ƒë√¢y l√† nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p v·ªõi '{keyword}':\n"
    for product in products:
        response += f"- {product['name']} ({product['category']}): {product['description']}\n"
        response += f"  Gi√°: {product['price']:,} VNƒê\n"
        if product.get('images'):
            response += f"  Xem h√¨nh ·∫£nh: {product['images'][0]}\n"
        response += f"  C√≤n l·∫°i: {product['quantity']} s·∫£n ph·∫©m\n"
        if product.get('ratings'):
            avg_rating = sum(r['rating'] for r in product['ratings']) / len(product['ratings'])
            response += f"  ƒê√°nh gi√°: {avg_rating:.1f}/5\n"
        response += "\n"
    response += "B·∫°n mu·ªën t√¨m th√™m g√¨ n·ªØa kh√¥ng? üòä"
    return response

# C√°ch 1: X√≥a route c·ª• th·ªÉ (t·ªët nh·∫•t)
if 'handle_chat' in app.view_functions:
    del app.view_functions['handle_chat']
# Route API ƒë·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m
@app.route('/chat-api', methods=['POST'])
def handle_chat():
    try:
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({'error': 'Vui l√≤ng g·ª≠i message trong body JSON'}), 400

        user_input = data['message']
        if not isinstance(user_input, str) or not user_input.strip():
            return jsonify({'error': 'Message ph·∫£i l√† chu·ªói kh√¥ng r·ªóng'}), 400

        keyword = extract_keyword(user_input)
        products = query_products(keyword)

        if not products:
            categories = get_categories()
            return jsonify({
                'message': f"Hmm, b·∫°n c√≥ mu·ªën th·ª≠ t√¨m {', '.join(categories).lower()} kh√¥ng?",
                'type': 'suggestions',
                'suggestions': categories
            })

        # N·∫øu c√≥ s·∫£n ph·∫©m, tr·∫£ v·ªÅ danh s√°ch
        result = []
        for product in products:
            result.append({
                'name': product['name'],
                'price': product['price'],
                'description': product['description'],
                'category': product.get('category', ''),
                'images': product.get('images', []),
                'quantity': product.get('quantity', 0),
                'ratings': product.get('ratings', [])
            })

        return jsonify({
            'message': f"T√¨m th·∫•y {len(result)} s·∫£n ph·∫©m ph√π h·ª£p v·ªõi '{keyword}'",
            'type': 'products',
            'products': result
        })

    except Exception as e:
        return jsonify({'error': f'ƒê√£ x·∫£y ra l·ªói: {str(e)}'}), 500
